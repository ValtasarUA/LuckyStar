from sqlite import *
async def get_row(result_dice: int):
  slot_values = {
    1: ("–±–∞—Ä", '–±–∞—Ä', '–±–∞—Ä'),
    2: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–±–∞—Ä', '–±–∞—Ä'),
    3: ("–ª–∏–º–æ–Ω", '–±–∞—Ä', '–±–∞—Ä'),
    4: ("—Å—ñ–º–∫–∞", '–±–∞—Ä', '–±–∞—Ä'),
    5: ("–±–∞—Ä", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä'),
    6: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä'),
    7: ("–ª–∏–º–æ–Ω", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä'),
    8: ("—Å—ñ–º–∫–∞", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä'),
    9: ("–±–∞—Ä", '–ª–∏–º–æ–Ω', '–±–∞—Ä'),
    10: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–ª–∏–º–æ–Ω', '–±–∞—Ä'),
    11: ("–ª–∏–º–æ–Ω", '–ª–∏–º–æ–Ω', '–±–∞—Ä'),
    12: ("—Å—ñ–º–∫–∞", '–ª–∏–º–æ–Ω', '–±–∞—Ä'),
    13: ("–±–∞—Ä", '—Å—ñ–º–∫–∞', '–±–∞—Ä'),
    14: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '—Å—ñ–º–∫–∞', '–±–∞—Ä'),
    15: ("–ª–∏–º–æ–Ω", '—Å—ñ–º–∫–∞', '–±–∞—Ä'),
    16: ("—Å—ñ–º–∫–∞", '—Å—ñ–º–∫–∞', '–±–∞—Ä'),
    17: ("–±–∞—Ä", '–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    18: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    19: ("–ª–∏–º–æ–Ω", '–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    20: ("—Å—ñ–º–∫–∞", '–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    21: ("–±–∞—Ä", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    22: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    23: ("–ª–∏–º–æ–Ω", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    24: ("—Å—ñ–º–∫–∞", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    25: ("–±–∞—Ä", '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    26: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    27: ("–ª–∏–º–æ–Ω", '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    28: ("—Å—ñ–º–∫–∞", '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    29: ("–±–∞—Ä", '—Å—ñ–º–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    30: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '—Å—ñ–º–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    31: ("–ª–∏–º–æ–Ω", '—Å—ñ–º–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    32: ("—Å—ñ–º–∫–∞", '—Å—ñ–º–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    33: ("–±–∞—Ä", '–±–∞—Ä', '–ª–∏–º–æ–Ω'),
    34: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–±–∞—Ä', '–ª–∏–º–æ–Ω'),
    35: ("–ª–∏–º–æ–Ω", '–±–∞—Ä', '–ª–∏–º–æ–Ω'),
    36: ("—Å—ñ–º–∫–∞", '–±–∞—Ä', '–ª–∏–º–æ–Ω'),
    37: ("–±–∞—Ä", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω'),
    38: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω'),
    39: ("–ª–∏–º–æ–Ω", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω'),
    40: ("—Å—ñ–º–∫–∞", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω'),
    41: ("–±–∞—Ä", '–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω'),
    42: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω'),
    43: ("–ª–∏–º–æ–Ω", '–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω'),
    44: ("—Å—ñ–º–∫–∞", '–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω'),
    45: ("–±–∞—Ä", '—Å—ñ–º–∫–∞', '–ª–∏–º–æ–Ω'),
    46: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '—Å—ñ–º–∫–∞', '–ª–∏–º–æ–Ω'),
    47: ("–ª–∏–º–æ–Ω", '—Å—ñ–º–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥'),
    48: ("—Å—ñ–º–∫–∞", '—Å—ñ–º–∫–∞', '–ª–∏–º–æ–Ω'),
    49: ("–±–∞—Ä", '–±–∞—Ä', '—Å—ñ–º–∫–∞'),
    50: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–±–∞—Ä', '—Å—ñ–º–∫–∞'),
    51: ("–ª–∏–º–æ–Ω", '–±–∞—Ä', '—Å—ñ–º–∫–∞'),
    52: ("—Å—ñ–º–∫–∞", '–±–∞—Ä', '—Å—ñ–º–∫–∞'),
    53: ("–±–∞—Ä", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å—ñ–º–∫–∞'),
    54: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å—ñ–º–∫–∞'),
    55: ("–ª–∏–º–æ–Ω", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å—ñ–º–∫–∞'),
    56: ("—Å—ñ–º–∫–∞", '–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å—ñ–º–∫–∞'),
    57: ("–±–∞—Ä", '–ª–∏–º–æ–Ω', '—Å—ñ–º–∫–∞'),
    58: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '–ª–∏–º–æ–Ω', '—Å—ñ–º–∫–∞'),
    59: ("–ª–∏–º–æ–Ω", '–ª–∏–º–æ–Ω', '—Å—ñ–º–∫–∞'),
    60: ("—Å—ñ–º–∫–∞", '–ª–∏–º–æ–Ω', '—Å—ñ–º–∫–∞'),
    61: ("–±–∞—Ä", '—Å—ñ–º–∫–∞', '—Å—ñ–º–∫–∞'),
    62: ("–≤–∏–Ω–æ–≥—Ä–∞–¥", '—Å—ñ–º–∫–∞', '—Å—ñ–º–∫–∞'),
    63: ("–ª–∏–º–æ–Ω", '—Å—ñ–º–∫–∞', '—Å—ñ–º–∫–∞'),
    64: ("—Å—ñ–º–∫–∞", '—Å—ñ–º–∫–∞', '—Å—ñ–º–∫–∞'),
  }
  return ', '.join(slot_values.get(result_dice)).capitalize()

async def get_point(result_dice: int):
  if result_dice in (1, 22, 43):
    return 4
  elif result_dice in (6, 11, 16, 17, 27, 32, 33, 48, 49, 54, 59, 38):
    return 1.6
  elif result_dice == 64:
    return 9
  else:
    return -1

async def get_result_text(result_dice: int, bid: int, user_id: int):
  result = await get_point(result_dice=result_dice)
  point = float(bid) * result
  combination_text = await get_row(result_dice=result_dice)


  if result > 0:
    balance = await get_balance2(user_id)
    bon = await get_bonus(user_id)
    bal = float(balance[0]) + float(point)
    await edit_balance2(user_id=user_id, bal=str(float(bal)))
    balance2 = await get_balance2(user_id)
    bon2 = await get_bonus(user_id)
    text_for_games = f'–í–∞—à–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è: \r\n {combination_text} X{float(result)+1}\r\n\nüôÇ –í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {float(point)+bid} UAH!\n\nüí≥ –ë–∞–ª–∞–Ω—Å: {float(balance2[0])} UAH\nüéÅ –ë–æ–Ω—É—Å: {float(bon2[0])} UAH'
    print(f"{user_id} –°–ª–æ—Ç–∏ - —Å—Ç–∞–≤–∫–∞: {bid} UAH    +{bid} = {balance2[0]}") 
  else:
    balance2 = await get_balance2(user_id)
    bon2 = await get_bonus(user_id)
    res_balance_user = float(balance2[0]) - float(bid)
    res_balance_user2 = float(bon2[0]) - float(bid)
    if float(bon2[0]) >= float(bid):
      await edit_bonus(user_id, res_balance_user2)
    else:
      if float(balance2[0]) >= float(bid):
        await edit_balance2(user_id, str(float(res_balance_user)))
      else:
        await edit_balance2(user_id, str(float(0)))

    balance2 = await get_balance2(user_id)
    bon2 = await get_bonus(user_id)
    text_for_games = f'–í–∞—à–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è: \r\n {combination_text}\r\n\nüòû –£–¥–∞—á–∞ –Ω–µ –Ω–∞ –≤–∞—à–æ–º—É –±–æ—Ü—ñ...\n –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\nüí≥ –ë–∞–ª–∞–Ω—Å: {float(balance2[0])} UAH\nüéÅ –ë–æ–Ω—É—Å: {float(bon2[0])} UAH'
    print(f"{user_id} –°–ª–æ—Ç–∏ - —Å—Ç–∞–≤–∫–∞: {bid} UAH    -{bid} = {balance2[0]}") 
  return text_for_games